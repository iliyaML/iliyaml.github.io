<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Design on </title>
    <link>/notes/system-design/design/</link>
    <description>Recent content in Design on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 06 Oct 2020 08:49:15 +0000</lastBuildDate><atom:link href="/notes/system-design/design/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>URL Shortener</title>
      <link>/notes/system-design/design/url-shortener/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/notes/system-design/design/url-shortener/</guid>
      <description>Notes from grokking system design
Similar: TinyURL, bitly
Requirements / Goals #Functional Generate shorter and unique alias of URL, redirect users to the original URL Option to choose custom short link Short links will expire after a default/certain timespan Non-functional High availability Minimal latency (URL redirection) Alias should not be predictable Extended Analytics - total number of redirects occurred Capacity Estimation / Constraints #100:1 read to write ratio (Read-heavy system) Reads = redirection requests Writes = new URL shortenings Scale?</description>
    </item>
    
    <item>
      <title>Short Media Sharing Platform</title>
      <link>/notes/system-design/design/short-media-sharing-platform/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/notes/system-design/design/short-media-sharing-platform/</guid>
      <description>Notes from grokking system design
Services: Instagram, TikTok
System Requirements / Goals #Functional Requirements Upload, download, view photos and short videos Video or photo metadata search Able to follow other users Non-functional Requirements High availability Consistency can take a hit (in the interest of availability), if a user doesn’t see a photo/video for a while, still fine High reliability (media is never lost) Acceptable latency (loading media) Capacity Estimation / Constraints #Read-heavy system Users Total Users: 500 M Daily Active Users (DAU): 1 M Storage For 1 Day: 2 M Uploaded Media * 200 KB average file size = 400 GB / day For 10 years: 400 GB / day * 365 days * 10 years = ~1425 TB High Level System Design #(Write) Upload media service (Read) View/Search media service Object storage servers - store media Database servers - store media metadata and users metadata Database Schema #Media MediaID int PK MediaPath varchar CreationDate datetime User UserID int PK Name varchar Email varchar DateOfBirth datetime CreationDate datetime LastLogin datetime UserFollow UserID1 int PK UserID2 int PK Relational Database Require joins Challenge to scale the application NoSQL Database Distributed key-value store Schema Media User UserFollow Apache Cassandra Maintain replicas for high reliability Media Data Store Distributed File Storage (HDFS) Distributed Object Storage (Amazon S3) Component Design #Split reads and writes to separate servers, avoid overload, scale independently (Microservices) Web servers have a connection limit (Assume 500, therefore can’t have more concurrent reads/writes more than this) (Write) Upload media service Slow, reads from disk (Read) View media service Faster, especially served from cache Reliability and Redundancy #High Availability and Reliability - Store multiple copies of media Multiple copies of the services, system will run even if one instance of a service dies Eliminate single PoF Data Sharding #Metadata Sharding (Options) Based on UserID (Not recommended) Based on MediaID Generate unique MediaIDs first and then find a shard number through MediaID % 10 servers Generate MediaIDs Dedicate a separate database instance to generate auto-incrementing IDs Define a table containing only an ID field As new media added into the system, insert a new row in this table and take that ID to be our MediaID of the new media Single PoF?</description>
    </item>
    
    <item>
      <title>Video Streaming Platform</title>
      <link>/notes/system-design/design/video-streaming-platform/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/notes/system-design/design/video-streaming-platform/</guid>
      <description>Notes from grokking system design
Services: Youtube, Netflix
Requirements #Functional Upload, view and share videos Search videos from titles/description Record stats (likes, number of views) Comment on videos Non-functional High Availability Consistency can take a hit in the interest of availability/lower latency, fine if an uploaded video takes a while to be available High Reliability (uploaded videos are never lost) Minimal Latency (while watching videos) Capacity Estimation / Constraints #Read-heavy system Read (View) to Write (Upload) Ratio 200:1 Traffic Total Users: 1.</description>
    </item>
    
  </channel>
</rss>
